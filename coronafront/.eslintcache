[{"C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\index.js":"1","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\App.js":"2","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\reportWebVitals.js":"3","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\User.js":"4","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Login.js":"5","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Admin.js":"6","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\SwitchMUI.js":"7","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Charts.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":2160,"mtime":1616744951961,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":2605,"mtime":1612962282782,"results":"13","hashOfConfig":"10"},{"size":2036,"mtime":1613637846601,"results":"14","hashOfConfig":"10"},{"size":1712,"mtime":1616744952511,"results":"15","hashOfConfig":"10"},{"size":2188,"mtime":1612961385819,"results":"16","hashOfConfig":"10"},{"size":16486,"mtime":1617875213791,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1j42ybv",{"filePath":"21","messages":"22","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\index.js",[],["39","40"],"C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\App.js",["41","42","43","44","45","46","47","48","49"],"import React, { useState } from 'react';\r\nimport { createMuiTheme, makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport User from './pages/User'\r\nimport Login from './pages/Login'\r\nimport Admin from './pages/Admin'\r\nimport Charts from './pages/Charts'\r\n\r\nimport SwitchMUI from './pages/SwitchMUI';\r\n\r\nconst theme = createMuiTheme({\r\n  overrides:{\r\n      MuiExpansionPanelSummary: {\r\n          root: {\r\n              backgroundColor: '#2D2D2D',\r\n              borderBottom: '1px solid #151515',\r\n              minHeight: 20,\r\n              marginBottom: -5,\r\n              '&$expanded': {\r\n                minHeight: 20,\r\n              }   \r\n          },\r\n            content: {\r\n              '&$expanded': {\r\n                margin: '12px 0',\r\n              }\r\n          }\r\n      },\r\n      MuiExpansionPanelDetails: {\r\n          root:{\r\n              backgroundColor: '#262626',\r\n              paddingBottom: 8,\r\n              paddingTop: 10,\r\n          }\r\n      }\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const [token, setToken] = useState();\r\n  const [type, setType] = useState();\r\n\r\n/*   if(!token){\r\n  return(    \r\n    <MuiThemeProvider theme={ theme }>\r\n      <CssBaseline />\r\n      <Login setToken={setToken} setType={setType}/>\r\n    </MuiThemeProvider>\r\n  );\r\n  }\r\n */\r\n  return(\r\n      <MuiThemeProvider theme={ theme }>\r\n          <BrowserRouter>\r\n            <div>\r\n              <CssBaseline />\r\n              <SwitchMUI/>\r\n                <Switch>\r\n                  <Route exact path='/' exact render={(props) => <User/> }/>\r\n                </Switch>\r\n                <Switch>\r\n                  <Route exact path='/admin' render={(props) => <Admin/> }/>\r\n                </Switch> \r\n                <Switch>\r\n                  <Route exact path='/chart' render={(props) => <Charts/> }/>\r\n                </Switch> \r\n            </div>\r\n          </BrowserRouter>\r\n      </MuiThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\reportWebVitals.js",[],"C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\User.js",["50"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nfunction User() {\r\n\r\n    const [user, setUser] = React.useState([]);\r\n\r\n    const getData = async () => {\r\n        fetch('http://localhost:8080/user')\r\n        .then(res => res.text())\r\n        .then(res => setUser({message: res}));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                user.map( user =>{\r\n                    return(\r\n                        <div>\r\n                        <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\r\n                        <Grid item xs={4}>\r\n                            \r\n                        <ExpansionPanel>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\">\r\n                                <Typography>\r\n                                    {user.name}\r\n                                </Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n                                <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item xs={11}>\r\n                                    <Typography>\r\n                                        Health: { user.health }\r\n                                    </Typography>\r\n                                </Grid>\r\n                            \r\n                                <Grid item xs={1}>\r\n                                    <IconButton aria-label=\"edit\" >\r\n                                        <EditIcon style={{ color: '#FFFFFF' }}/>\r\n                                    </IconButton>\r\n                                </Grid>\r\n                                </Grid>\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n                        </Grid>\r\n                        </Grid>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Login.js",[],"C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Admin.js",["51","52","53","54","55","56","57","58"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nfunction Admin() {\r\n\r\n    const [Logins, setLogins] = React.useState([]);\r\n    const [error, setError] = React.useState('Searching...');\r\n\r\n    const fetchUrl = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/user');\r\n            const json = await response.json();\r\n            setLogins(json);\r\n            setError('');\r\n\r\n        } catch(error) {\r\n            setLogins([]);\r\n            setError('Something went wrong :(');\r\n        }\r\n}\r\n        React.useEffect( () => { fetchUrl() }, []);\r\n\r\n        if (error.length > 0) {\r\n            return(\r\n                <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\r\n                    <p>{ error }</p>\r\n                </Grid>\r\n            );\r\n        }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {\r\n                <div>\r\n                <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\r\n                <Grid item xs={4}>\r\n                \r\n                <h2>ADMIN</h2>\r\n\r\n                </Grid>\r\n                </Grid>\r\n                </div>\r\n                    \r\n                \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin","C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\SwitchMUI.js",[],"C:\\Users\\joni9\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Charts.js",["59","60","61","62","63","64","65","66","67","68","69"],"import React, { useEffect } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Scatter } from 'react-chartjs-2';\r\nimport DateTimePicker from 'react-datetime-picker';\r\nimport { Button } from '@material-ui/core';\r\nimport DataJson from '../data/csvjson.json'\r\n\r\n//drawer komponentit\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n//Summary list komponentti\r\nimport List from '@material-ui/core/List';\r\n\r\n\r\n\r\nfunction Charts() {\r\n\r\n    //drawer komponentit \r\n    const [drawer, setDrawer] = React.useState(0)\r\n    // 0 = general summary, 1 personal summary, 2 room summary\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleChange = (event) => {\r\n        setDrawer(event.target.value);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n  \r\n    const [secs, setMins] = React.useState(1);\r\n\r\n    const [readyData, setReadyData] = React.useState([]);\r\n\r\n    const trentodata = DataJson;\r\n\r\n    //{tagId: 0, risk: 0, route: [{time: 0, x:0, y:0},{time:1, x:1, y:1}]},\r\n    //{tagId: 1, risk: 0, route: [{time: 0, x:0, y:0},{time:1, x:1, y:1}]}\r\n    /*     const routeData = [\r\n            {tagID, risk, route:[{time,x,y}]}\r\n        ]\r\n     */\r\n    //{overall risk levels, close contact situations, directional contact:[{face to face, shoulder to shoulder, ...}]}\r\n    const summary = []\r\n\r\n    const testData = [\r\n        {\r\n            \"name\": \"Location\",\r\n            \"time\": 1614944496619605500,\r\n            \"room\": \"lab\",\r\n            \"tagID\": 2,\r\n            \"x\": 2.693613716183034,\r\n            \"y\": 3.5775570877129788\r\n        }\r\n    ]\r\n\r\n    //create an array {tagId: i, route: {time: t, x: z, y: z}}\r\n    /*\r\n        const users = () => {\r\n            let i;\r\n            for(i = 0; i < trentodata.length-1; i++){\r\n                //if tagID not on list, push tagID into routeData.tagID && route info\r\n                //else if tagID on list, push route info\r\n                if (trentodata[i].tagID )\r\n        }}\r\n    */\r\n\r\n    let risks = []\r\n    //modify rist check to check through routeData\r\n    const checkRisk = () => {\r\n        risks = []\r\n        let i;\r\n\r\n        //Starting the loop into the data.\r\n        for (i = 0; i < readyData.length - 1; i++) {\r\n            console.log(\"I: \" + i);\r\n            //Getting a date to compare to.\r\n            let comparable = new Date(readyData[i].time / 1000000);\r\n            console.log(\"Comparable: \" + comparable);\r\n            //Initializing the integer being compared to\r\n            let i2;\r\n            \r\n\r\n            //Looping i2 to be every object after i\r\n            for (i2 = i + 1; i2 < readyData.length; i2++) {\r\n                console.log(\"I2: \" + i2);\r\n                console.log(\"Duplicate: \" + readyData[i].tagID != readyData[i2].tagID);\r\n                console.log(\"Same room: \" + readyData[i].room === readyData[i2].room);\r\n\r\n                // checking that i and i2 aren't the same person and that they are in the same room.\r\n                if(readyData[i].tagID != readyData[i2].tagID && readyData[i].room === readyData[i2].room){\r\n                console.log(\"Compared to: \" + new Date(readyData[i2].time/1000000));\r\n                console.log(\"time comparison: \" + Math.abs(comparable.getTime() - new Date(readyData[i2].time/1000000))/1000);\r\n\r\n                    //comparing if the two datapoints are within a certain number of seconds.\r\n                    if (Math.abs(comparable - new Date(readyData[i2].time / 1000000)) / 1000 < secs) {\r\n                        let distance = calcDist(readyData[i], readyData[i2]);\r\n                        console.log(\"Distance: \" + distance);\r\n                        console.log(\"-----\");\r\n\r\n                        //checking the distance, from the closest to the least close to account for risk from proximity.\r\n                        if (distance < 1) {\r\n                            risks.push({ \"dist\": distance, \"person1\": readyData[i].tagID, \"person2\": readyData[i2].tagID, \"time\": new Date(readyData[i].time / 1000000), \"risk\": \"high\" });\r\n                        } else if (distance < 2) {\r\n                            risks.push({ \"dist\": distance, \"person1\": readyData[i].tagID, \"person2\": readyData[i2].tagID, \"time\": new Date(readyData[i].time / 1000000), \"risk\": \"medium\" });\r\n                        } else if (distance < 4) {\r\n                            risks.push({ \"dist\": distance, \"person1\": readyData[i].tagID, \"person2\": readyData[i2].tagID, \"time\": new Date(readyData[i].time / 1000000), \"risk\": \"low\" });\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(risks);\r\n        console.log(\"---------------------------------------------\")\r\n    }\r\n\r\n    let roomrisk = \"\";\r\n\r\n    const checkRoomRisk = (room) => {\r\n        let i;\r\n        roomrisk = \"\";\r\n\r\n        let lowrisk = 0;\r\n        let medrisk = 0;\r\n        let highrisk = 0;\r\n\r\n        //Starting the loop into the data.\r\n        for(i = 0; i < readyData.length-1; i++){\r\n\r\n            //Getting a date to compare to.\r\n            let comparable = new Date(readyData[i].time/1000000);\r\n\r\n            //Initializing the integer being compared to\r\n            let i2;\r\n            \r\n            //skipping cases where person 1 is not in the room we are checking\r\n            if(readyData[i].room === room) {\r\n\r\n                //Looping i2 to be every object after i\r\n                for(i2 = i+1; i2 < readyData.length; i2++) {\r\n\r\n                    //skipping cases where person 2 is not in the room we are checking\r\n                    if(readyData[i2].room === room) {\r\n\r\n                        // checking that i and i2 aren't the same person.\r\n                        if(readyData[i].tagID != readyData[i2].tagID){\r\n\r\n                            //comparing if the two datapoints are within a certain number of seconds.\r\n                            if(Math.abs(comparable - new Date(readyData[i2].time/1000000))/1000 < secs){\r\n\r\n                                // calculating the distance\r\n                                let distance = calcDist(readyData[i], readyData[i2]);\r\n                                //checking the distance, from the closest to the least close to account for risk from proximity.\r\n                                if (distance < 1){\r\n                                    ++highrisk;\r\n                                } else if (distance < 2) {\r\n                                    ++medrisk;\r\n                                } else if (distance < 4) {\r\n                                    ++lowrisk;\r\n                                }\r\n\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Counting how many risk encounters there were\r\n        const totalrisk = lowrisk+medrisk+highrisk;\r\n\r\n        roomrisk = \"We had a total of \" + totalrisk + \" encounters. \" + highrisk + \" of them were high risk, \" + medrisk + \" of them were medium risk, and \" + lowrisk + \" of them were low risk.\"\r\n\r\n        \r\n        if (highrisk > (totalrisk/2)){\r\n            roomrisk = roomrisk + \" The riskyness of the room is high, there's some spot where people like to get real close.\"\r\n        } else if (lowrisk > (totalrisk/2)){\r\n            roomrisk = roomrisk + \" The riskyness of the room is quite low, people may like to be here, but not too close to each other.\"\r\n        }\r\n    }\r\n\r\n    let individualrisk = [];\r\n\r\n    //modify rist check to check through routeData\r\n    const checkOneRisk = (tagID) => {\r\n        let i;\r\n        individualrisk = [];\r\n\r\n        //Starting the loop into the data.\r\n        for(i = 0; i < readyData.length-1; i++){\r\n\r\n            //Getting a date to compare to.\r\n            let comparable = new Date(readyData[i].time/1000000);\r\n\r\n            //Initializing the integer being compared to\r\n            let i2;\r\n\r\n            //Looping i2 to be every object after i\r\n            for(i2 = i+1; i2 < readyData.length; i2++) {\r\n\r\n                // checking that i is the person we're checking, that i and i2 aren't the same person, and that they are in the same room.\r\n                if(readyData[i].tagID === tagID && readyData[i].tagID != readyData[i2].tagID && readyData[i].room === readyData[i2].room){\r\n\r\n                    //comparing if the two datapoints are within a certain number of seconds.\r\n                    if(Math.abs(comparable - new Date(readyData[i2].time/1000000))/1000 < secs){\r\n                        let distance = calcDist(readyData[i], readyData[i2]);\r\n\r\n                        //checking the distance, from the closest to the least close to account for risk from proximity.\r\n                        if (distance < 1){\r\n                            individualrisk.push( { \"dist\": distance, \"person2\": readyData[i2].tagID, \"time\": new Date(readyData[i].time/1000000), \"risk\": \"high\"} );\r\n                        } else if (distance < 2) {\r\n                            individualrisk.push( { \"dist\": distance, \"person2\": readyData[i2].tagID, \"time\": new Date(readyData[i].time/1000000), \"risk\": \"medium\"} );\r\n                        } else if (distance < 4) {\r\n                            individualrisk.push( { \"dist\": distance, \"person2\": readyData[i2].tagID, \"time\": new Date(readyData[i].time/1000000), \"risk\": \"low\"} );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log(individualrisk);\r\n        console.log(\"---------------------------------------------\")\r\n    }\r\n\r\n    //mahd. spread notaatio. Laskeminen for loopin sisällä. HashMap, hajautus algoritmi.\r\n    /* \r\n    const [earliest, setEarliest] = React.useState(new Date(Math.min(...trentodata.map(e => new Date(e.time/1000000)))));\r\n    const [latest, setLatest] = React.useState(new Date(Math.max(...trentodata.map(e => new Date(e.time/1000000))))); \r\n    */\r\n    const [earliest, setEarliest] = React.useState()\r\n    const [latest, setLatest] = React.useState()\r\n\r\n    useEffect(() => { minmaxTime() }, []);\r\n\r\n    const minmaxTime = () => {\r\n        let i;\r\n        let min = trentodata[0];\r\n        let max = trentodata[0];\r\n        for (i = 0; i < trentodata.length; i++) {\r\n\r\n            if (trentodata[i].time < min.time) {\r\n                min = trentodata[i]\r\n            }\r\n            else if (trentodata[i].time > max.time) {\r\n                max = trentodata[i]\r\n            }\r\n        }\r\n        setEarliest(new Date(min.time / 1000000));\r\n        setLatest(new Date(max.time / 1000000));\r\n    }\r\n\r\n\r\n    const filterData = () => {\r\n        let thisdata = trentodata.filter(trentodata => earliest <= new Date(trentodata.time / 1000000));\r\n        thisdata = thisdata.filter(thisdata => latest >= new Date(thisdata.time / 1000000));\r\n        setReadyData(thisdata);\r\n    }\r\n\r\n    const calcDist = (posit1, posit2) => {\r\n        let dist1 = Math.pow((posit1.x - posit2.x), 2)\r\n        let dist2 = Math.pow((posit1.y - posit2.y), 2)\r\n\r\n        return Math.sqrt(Math.abs(dist1 + dist2))\r\n    }\r\n\r\n    const data = {\r\n        labels: ['Scatter'],\r\n        datasets: [\r\n            {\r\n                label: 'My First dataset',\r\n                fill: true,\r\n                backgroundColor: 'rgba(0,0,160,0.4)',\r\n                pointBorderColor: 'rgba(0,0,160,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 3,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(0,0,160,1)',\r\n                pointHoverBorderColor: 'rgba(0,0,160,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: readyData,\r\n                options: {\r\n                    tooltips: {\r\n                        mode: 'index'\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n/* \r\n    const lists = { \r\n        return (\r\n                \r\n                Listitem value.drawer\r\n                )\r\n            } \r\n    \r\n*/\r\n    //Warnings: Failed prop type: The prop (justify, direction) need to be set on 'container' element\r\n    return (\r\n        <div>\r\n            {\r\n                <div>\r\n                    <Grid container spacing={1} justify=\"center\">\r\n                        <Grid container item xs={12} spacing={3} justify=\"center\" style={{ marginRight: 100 }}>\r\n                            <Grid item xs={8}>\r\n                                <h2>Charts</h2>\r\n                                <Scatter data={data} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item xs={12} spacing={3} direction=\"row\" justify=\"center\" alignItems=\"center\" style={{ margin: 5 }}>\r\n                            <Grid item xs={4} justify=\"center\" direction=\"column\">\r\n                                <Typography>\r\n                                    Earliest\r\n                                </Typography>\r\n                                <DateTimePicker\r\n                                    onChange={setEarliest}\r\n                                    value={earliest}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4} justify=\"center\" direction=\"column\">\r\n                                <Typography>\r\n                                    Latest\r\n                                </Typography>\r\n                                <DateTimePicker\r\n                                    onChange={setLatest}\r\n                                    value={latest}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item xs={12} spacing={3} direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\r\n                            <Grid item xs={6} style={{ backgroundColor: \"white\" }}>\r\n                                <h3>Summary</h3>\r\n                                <Grid container item xs={10} spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"center\">\r\n                                <Grid item xs={2}>\r\n                                <Select\r\n                                    labelId=\"open-select-label\"\r\n                                    id=\"open-select\"\r\n                                    open={open}\r\n                                    onClose={handleClose}\r\n                                    onOpen={handleOpen}\r\n                                    value={drawer}\r\n                                    onChange={handleChange}\r\n                                >\r\n                                    \r\n                                    <MenuItem value={0}>General</MenuItem>\r\n                                    <MenuItem value={1}>Person</MenuItem>\r\n                                    <MenuItem value={2}>Room</MenuItem>\r\n                                </Select></Grid>\r\n                                <Grid item xs={2}><Typography>summary</Typography></Grid>\r\n                                \r\n                                </Grid>\r\n                                <List>\r\n                                    {/* Create list here.. */}\r\n                                </List>\r\n                            </Grid>\r\n\r\n                            <Grid container item xs={4} spacing={1} direction=\"column\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n                                <Grid item xs={4}>\r\n                                    <Button onClick={filterData} color=\"primary\" variant=\"contained\">\r\n                                        filter\r\n                                </Button>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <form>\r\n                                        <Button onClick={checkRisk} color=\"primary\" variant=\"contained\">\r\n                                            get risks\r\n                                    </Button>\r\n                                    </form>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Charts",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":26,"nodeType":"76","messageId":"77","endLine":2,"endColumn":36},{"ruleId":"74","severity":1,"message":"78","line":2,"column":38,"nodeType":"76","messageId":"77","endLine":2,"endColumn":51},{"ruleId":"74","severity":1,"message":"79","line":5,"column":40,"nodeType":"76","messageId":"77","endLine":5,"endColumn":48},{"ruleId":"74","severity":1,"message":"80","line":7,"column":8,"nodeType":"76","messageId":"77","endLine":7,"endColumn":13},{"ruleId":"74","severity":1,"message":"81","line":42,"column":10,"nodeType":"76","messageId":"77","endLine":42,"endColumn":15},{"ruleId":"74","severity":1,"message":"82","line":42,"column":17,"nodeType":"76","messageId":"77","endLine":42,"endColumn":25},{"ruleId":"74","severity":1,"message":"83","line":43,"column":10,"nodeType":"76","messageId":"77","endLine":43,"endColumn":14},{"ruleId":"74","severity":1,"message":"84","line":43,"column":16,"nodeType":"76","messageId":"77","endLine":43,"endColumn":23},{"ruleId":"85","severity":1,"message":"86","line":61,"column":41,"nodeType":"87","endLine":61,"endColumn":46},{"ruleId":"74","severity":1,"message":"88","line":15,"column":11,"nodeType":"76","messageId":"77","endLine":15,"endColumn":18},{"ruleId":"74","severity":1,"message":"89","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":18},{"ruleId":"74","severity":1,"message":"90","line":4,"column":8,"nodeType":"76","messageId":"77","endLine":4,"endColumn":22},{"ruleId":"74","severity":1,"message":"91","line":5,"column":8,"nodeType":"76","messageId":"77","endLine":5,"endColumn":29},{"ruleId":"74","severity":1,"message":"92","line":6,"column":8,"nodeType":"76","messageId":"77","endLine":6,"endColumn":29},{"ruleId":"74","severity":1,"message":"93","line":7,"column":8,"nodeType":"76","messageId":"77","endLine":7,"endColumn":22},{"ruleId":"74","severity":1,"message":"94","line":8,"column":8,"nodeType":"76","messageId":"77","endLine":8,"endColumn":18},{"ruleId":"74","severity":1,"message":"95","line":9,"column":8,"nodeType":"76","messageId":"77","endLine":9,"endColumn":16},{"ruleId":"74","severity":1,"message":"96","line":13,"column":12,"nodeType":"76","messageId":"77","endLine":13,"endColumn":18},{"ruleId":"74","severity":1,"message":"97","line":4,"column":8,"nodeType":"76","messageId":"77","endLine":4,"endColumn":17},{"ruleId":"74","severity":1,"message":"98","line":38,"column":18,"nodeType":"76","messageId":"77","endLine":38,"endColumn":25},{"ruleId":"74","severity":1,"message":"99","line":51,"column":11,"nodeType":"76","messageId":"77","endLine":51,"endColumn":18},{"ruleId":"74","severity":1,"message":"100","line":53,"column":11,"nodeType":"76","messageId":"77","endLine":53,"endColumn":19},{"ruleId":"101","severity":1,"message":"102","line":94,"column":64,"nodeType":"103","messageId":"104","endLine":94,"endColumn":66},{"ruleId":"101","severity":1,"message":"102","line":98,"column":39,"nodeType":"103","messageId":"104","endLine":98,"endColumn":41},{"ruleId":"74","severity":1,"message":"105","line":126,"column":11,"nodeType":"76","messageId":"77","endLine":126,"endColumn":24},{"ruleId":"101","severity":1,"message":"102","line":153,"column":47,"nodeType":"103","messageId":"104","endLine":153,"endColumn":49},{"ruleId":"74","severity":1,"message":"106","line":193,"column":11,"nodeType":"76","messageId":"77","endLine":193,"endColumn":23},{"ruleId":"101","severity":1,"message":"102","line":210,"column":71,"nodeType":"103","messageId":"104","endLine":210,"endColumn":73},{"ruleId":"107","severity":1,"message":"108","line":240,"column":39,"nodeType":"109","endLine":240,"endColumn":41,"suggestions":"110"},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","'Redirect' is defined but never used.","'Login' is defined but never used.","'token' is assigned a value but never used.","'setToken' is assigned a value but never used.","'type' is assigned a value but never used.","'setType' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'getData' is assigned a value but never used.","'Typography' is defined but never used.","'ExpansionPanel' is defined but never used.","'ExpansionPanelSummary' is defined but never used.","'ExpansionPanelDetails' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'IconButton' is defined but never used.","'EditIcon' is defined but never used.","'Logins' is assigned a value but never used.","'TextField' is defined but never used.","'setMins' is assigned a value but never used.","'summary' is assigned a value but never used.","'testData' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'checkRoomRisk' is assigned a value but never used.","'checkOneRisk' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'minmaxTime'. Either include it or remove the dependency array.","ArrayExpression",["113"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},"Update the dependencies array to be: [minmaxTime]",{"range":"116","text":"117"},[10261,10263],"[minmaxTime]"]