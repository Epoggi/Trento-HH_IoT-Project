[{"C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\index.js":"1","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\reportWebVitals.js":"2","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\App.js":"3","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Admin.js":"4","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\User.js":"5","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Login.js":"6","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Charts.js":"7","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\SwitchMUI.js":"8","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Functions.js":"9"},{"size":517,"mtime":1615535995020,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1615535995832,"results":"12","hashOfConfig":"11"},{"size":1892,"mtime":1621326852359,"results":"13","hashOfConfig":"11"},{"size":1712,"mtime":1615978810813,"results":"14","hashOfConfig":"11"},{"size":2605,"mtime":1615535995718,"results":"15","hashOfConfig":"11"},{"size":2036,"mtime":1615982918230,"results":"16","hashOfConfig":"11"},{"size":9429,"mtime":1621326852398,"results":"17","hashOfConfig":"11"},{"size":2188,"mtime":1615535995635,"results":"18","hashOfConfig":"11"},{"size":10075,"mtime":1621326852361,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"pw37vz",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"22"},"C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\index.js",[],["43","44"],"C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\reportWebVitals.js",[],"C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\App.js",["45","46","47","48","49","50","51","52","53","54"],"C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Admin.js",["55","56","57","58","59","60","61","62"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nfunction Admin() {\r\n\r\n    const [Logins, setLogins] = React.useState([]);\r\n    const [error, setError] = React.useState('Searching...');\r\n\r\n    const fetchUrl = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost:8080/user');\r\n            const json = await response.json();\r\n            setLogins(json);\r\n            setError('');\r\n\r\n        } catch(error) {\r\n            setLogins([]);\r\n            setError('Something went wrong :(');\r\n        }\r\n}\r\n        React.useEffect( () => { fetchUrl() }, []);\r\n\r\n        if (error.length > 0) {\r\n            return(\r\n                <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\r\n                    <p>{ error }</p>\r\n                </Grid>\r\n            );\r\n        }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {\r\n                <div>\r\n                <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\r\n                <Grid item xs={4}>\r\n                \r\n                <h2>ADMIN</h2>\r\n\r\n                </Grid>\r\n                </Grid>\r\n                </div>\r\n                    \r\n                \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Admin","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\User.js",["63"],"import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nfunction User() {\r\n\r\n    const [user, setUser] = React.useState([]);\r\n\r\n    const getData = async () => {\r\n        fetch('http://localhost:8080/user')\r\n        .then(res => res.text())\r\n        .then(res => setUser({message: res}));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                user.map( user =>{\r\n                    return(\r\n                        <div>\r\n                        <Grid container spacing={3} alignItems=\"center\" justify=\"center\">\r\n                        <Grid item xs={4}>\r\n                            \r\n                        <ExpansionPanel>\r\n                            <ExpansionPanelSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                                aria-controls=\"panel1a-content\"\r\n                                id=\"panel1a-header\">\r\n                                <Typography>\r\n                                    {user.name}\r\n                                </Typography>\r\n                            </ExpansionPanelSummary>\r\n                            <ExpansionPanelDetails>\r\n                                <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item xs={11}>\r\n                                    <Typography>\r\n                                        Health: { user.health }\r\n                                    </Typography>\r\n                                </Grid>\r\n                            \r\n                                <Grid item xs={1}>\r\n                                    <IconButton aria-label=\"edit\" >\r\n                                        <EditIcon style={{ color: '#FFFFFF' }}/>\r\n                                    </IconButton>\r\n                                </Grid>\r\n                                </Grid>\r\n                            </ExpansionPanelDetails>\r\n                        </ExpansionPanel>\r\n                        </Grid>\r\n                        </Grid>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default User","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Login.js",[],"C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Charts.js",["64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79"],"import React, { useEffect } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Scatter } from 'react-chartjs-2';\r\nimport DateTimePicker from 'react-datetime-picker';\r\nimport { Button } from '@material-ui/core';\r\nimport * as Functions from './Functions'\r\n\r\n//Test data\r\nimport DataJson from '../data/csvjson.json'\r\n\r\n//Csv use\r\nimport { CSVLink } from \"react-csv\";\r\nimport CSVReader from \"react-csv-reader\";\r\n\r\n//drawer komponentit\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\n//Summary list komponentti\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\n\r\n\r\nfunction Charts() {\r\n    \r\n    const [uploadData, setUploadData] = React.useState([{\r\n        \"name\": \"Dummy\",\r\n        \"time\": 1614944496619605500,\r\n        \"room\": \"dummy\",\r\n        \"tagID\": 1,\r\n        \"x\": 2,\r\n        \"y\": 3\r\n    }])\r\n\r\n    const handleData = (data, fileInfo) => setUploadData(data);\r\n    \r\n    const papaparseOptions = {\r\n      header: true,\r\n      dynamicTyping: true,\r\n      skipEmptyLines: true,\r\n      transformHeader: header => header.toLowerCase().replace(/\\W/g, \"_\")\r\n    };\r\n  \r\n\r\n    //Functions.\r\n\r\n    const [readyData, setReadyData] = React.useState([]);\r\n\r\n    const trentodata = DataJson;\r\n\r\n    const [trimmedData, setTrimmedData] = React.useState([]);\r\n    useEffect(() => { setTrimmedData(Functions.trimData(uploadData)) }, [uploadData]);  \r\n  \r\n    //{overall risk levels, close contact situations, directional contact:[{face to face, shoulder to shoulder, ...}]}\r\n    const summary = []\r\n\r\n    //create an array {tagId: i, route: {time: t, x: z, y: z}}\r\n    /*\r\n        const users = () => {\r\n            let i;\r\n            for(i = 0; i < trentodata.length-1; i++){\r\n                //if tagID not on list, push tagID into routeData.tagID && route info\r\n                //else if tagID on list, push route info\r\n                if (trentodata[i].tagID )\r\n        }}\r\n    */\r\n\r\n    let risks = []\r\n\r\n    let roomrisk = \"\";\r\n\r\n    let individualrisk = [];\r\n\r\n    //mahd. spread notaatio. Laskeminen for loopin sisällä. HashMap, hajautus algoritmi.\r\n    /* \r\n    const [earliest, setEarliest] = React.useState(new Date(Math.min(...trentodata.map(e => new Date(e.time/1000000)))));\r\n    const [latest, setLatest] = React.useState(new Date(Math.max(...trentodata.map(e => new Date(e.time/1000000))))); \r\n    */\r\n    const [earliest, setEarliest] = React.useState()\r\n    const [latest, setLatest] = React.useState()\r\n\r\n    useEffect(() => { minmaxTime() }, [uploadData]);\r\n\r\n    const minmaxTime = () => {\r\n        let i;\r\n        let min = uploadData[0];\r\n        let max = uploadData[0];\r\n        for (i = 0; i < uploadData.length; i++) {\r\n\r\n            if (uploadData[i].time < min.time) {\r\n                min = uploadData[i]\r\n            }\r\n            else if (uploadData[i].time > max.time) {\r\n                max = uploadData[i]\r\n            }\r\n        }\r\n        setEarliest(new Date(min.time / 1000000));\r\n        setLatest(new Date(max.time / 1000000));\r\n    }\r\n\r\n\r\n    const filterData = () => {\r\n        let thisdata = trimmedData.filter(trimmedData => earliest <= new Date(trimmedData.time / 1000000));\r\n        thisdata = thisdata.filter(thisdata => latest >= new Date(thisdata.time / 1000000));\r\n        setReadyData(thisdata);\r\n    }\r\n\r\n/*     const calcDist = (posit1, posit2) => {\r\n        let dist1 = Math.pow((posit1.x - posit2.x), 2)\r\n        let dist2 = Math.pow((posit1.y - posit2.y), 2)\r\n\r\n        return Math.sqrt(Math.abs(dist1 + dist2))\r\n    } */\r\n\r\n    const data = {\r\n        labels: ['Scatter'],\r\n        datasets: [\r\n            {\r\n                label: 'My First dataset',\r\n                fill: true,\r\n                backgroundColor: 'rgba(0,0,160,0.4)',\r\n                pointBorderColor: 'rgba(0,0,160,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 3,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(0,0,160,1)',\r\n                pointHoverBorderColor: 'rgba(0,0,160,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                data: trimmedData,\r\n                options: {\r\n                    tooltips: {\r\n                        mode: 'index'\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n\r\n    const [risk, setRisk] = React.useState([])\r\n//material ui demo ->\r\n    function generate() {\r\n        return risk.map((el => {\r\n            return <ListItem primaryText={el.dist} key={el.dist}/>\r\n        }),\r\n        );\r\n      }\r\n\r\n    const [dense, setDense] = React.useState(false);\r\n    const [secondary, setSecondary] = React.useState(false);\r\n\r\n    const renderlist = () => {\r\n        return (\r\n        <div>\r\n            <List dense={dense}>\r\n              {generate()}\r\n            </List>\r\n        </div>\r\n        )} \r\n    /* _renderTodos(){\r\n    return this.state.todos.map(el => {\r\n        return <ListItem primaryText={el.text} key={el.id}/>\r\n    })\r\n}\r\n\r\nrender(){\r\n    return(\r\n        <MobileTearSheet>\r\n            <List>\r\n                {this._renderTodos()}\r\n            </List>\r\n        </MobileTearSheet>\r\n    )\r\n} */\r\n//material ui demo end.\r\n\r\n    return (\r\n        <div>\r\n            \r\n                <div>\r\n                    <Grid container spacing={1} justify=\"center\">\r\n                        <Grid container item xs={12} spacing={3} justify=\"center\" style={{ marginRight: 100 }}>\r\n                            <Grid item xs={8}>\r\n                                <h2>Charts</h2>\r\n                                <Scatter data={data} />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item xs={12} spacing={3} direction=\"row\" justify=\"center\" alignItems=\"center\" style={{ margin: 5 }}>\r\n                            <Grid item xs={4} justify=\"center\" direction=\"column\">\r\n                                <Typography>\r\n                                    Earliest\r\n                                </Typography>\r\n                                <DateTimePicker\r\n                                    onChange={setEarliest}\r\n                                    value={earliest}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4} justify=\"center\" direction=\"column\">\r\n                                <Typography>\r\n                                    Latest\r\n                                </Typography>\r\n                                <DateTimePicker\r\n                                    onChange={setLatest}\r\n                                    value={latest}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container item xs={12} spacing={3} direction=\"row\" justify=\"flex-end\" alignItems=\"center\">\r\n                            <Grid item xs={6} style={{ backgroundColor: \"white\" }}>\r\n                                <CSVReader\r\n                                    cssClass=\"react-csv-input\"\r\n                                    label=\"Select CSV data to parse. \"\r\n                                    onFileLoaded={handleData}\r\n                                    parserOptions={papaparseOptions}\r\n                                />                                \r\n                            </Grid>\r\n\r\n                            <Grid container item xs={4} spacing={1} direction=\"column\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n                                <Grid item xs={4}>\r\n                                    <Button onClick={filterData} color=\"primary\" variant=\"contained\">\r\n                                        filter\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item xs={4}>\r\n                                    <CSVLink\r\n                                        data = {Functions.checkRisk(trimmedData)}\r\n                                        headers={[\r\n                                            {label: 'Distance', key: 'dist'},\r\n                                            {label: 'Person 1', key: 'person1'},\r\n                                            {label: 'Person 2', key: 'person2'},\r\n                                            {label: 'Time', key: 'time'},\r\n                                            {label: 'Room of Person 1', key: 'room1'},\r\n                                            {label: 'Room of Person 2', key: 'room2'},\r\n                                            {label: 'Risk', key: 'risk'},\r\n                                        ]}\r\n                                        filename={\"Risks.csv\"}\r\n                                        target=\"_blank\"\r\n                                    >\r\n                                        Download Data CSV\r\n                                    </CSVLink>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Charts","C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\SwitchMUI.js",[],"C:\\Users\\Kron8\\work\\SofPro\\Trento-HH_IoT-Project\\coronafront\\src\\pages\\Functions.js",["80","81","82"],"\r\n//filter rawdata by minutes\r\nexport const trimData = (rawdata) => {\r\n    \r\n        //filter list to provide datapoints only every 1 minute, scrap else\r\n        const minTime = (data) => {\r\n            let i;\r\n            let min = data[0];\r\n            for (i = 0; i < data.length; i++) {\r\n    \r\n                if (data[i].time < min.time) {\r\n                    min = data[i]\r\n                }\r\n            }\r\n        return min\r\n        }\r\n\r\n        let list = [];\r\n        list.push(minTime(rawdata))\r\n        //console.log(\"First date: \" + new Date(list[list.length-1].time/1000000))\r\n        //console.log(\"First minute: \" + new Date(list[list.length-1].time/1000000).getMinutes())\r\n\r\n        for (let i = 0; i < rawdata.length - 1; i++) {\r\n            //search for the minutes\r\n           // console.log(\"Compare minute: \" + new Date(rawdata[i].time/1000000).getMinutes())\r\n            \r\n            if (new Date(list[list.length-1].time/1000000).getMinutes() < new Date(rawdata[i].time/1000000).getMinutes() || new Date(list[list.length-1].time/1000000).getHours() < new Date(rawdata[i].time/1000000).getHours() ){\r\n                list.push(rawdata[i])\r\n                //console.log(\"New pushed date: \" + new Date(rawdata[i].time/1000000))\r\n            }  \r\n    }\r\n    return list\r\n}\r\n\r\n//function const riskSecs = (secs = 1) => { return{ checkRisk, checkRoomRisk, check}}\r\n//modify risk check to check through routeData\r\nexport const checkRisk = (data, secs = 61) => {\r\n    let risks = [];\r\n    let i;\r\n\r\n    //Starting the loop into the data.\r\n    for (i = 0; i < data.length - 1; i++) {\r\n        //console.log(\"I: \" + i);\r\n        //Getting a date to compare to.\r\n        let comparable = new Date(data[i].time / 1000000);\r\n        //console.log(\"Comparable: \" + comparable);\r\n        //Initializing the integer being compared to\r\n        let i2;\r\n\r\n\r\n        //Looping i2 to be every object after i\r\n        for (i2 = i + 1; i2 < data.length; i2++) {\r\n            //console.log(\"I2: \" + i2);\r\n           // console.log(\"Duplicate: \" + data[i].tagID != data[i2].tagID);\r\n            //console.log(\"Room1:\" + new String(data[i].room).normalize() + \" Room2:\" + new String(data[i2].room).normalize());\r\n           /*  console.log(\"Same room: \" + new String(data[i].room).normalize().trim().valueOf() == new String(data[i].room).normalize().trim().valueOf());\r\n            console.log(\"Type of room1:\" + typeof data[i].room + \", Room: \" + data[i].room)\r\n            console.log(\"Type of room2:\" + typeof data[i2].room + \", Room: \" + data[i].room) */\r\n\r\n            // checking that i and i2 aren't the same person, checking for same room disabled because strings are always not equal.\r\n            if (data[i].tagID != data[i2].tagID /* && data[i].room == data[i2].room */) {\r\n                //console.log(\"Compared to: \" + new Date(data[i2].time / 1000000));\r\n                //console.log(\"time comparison: \" + Math.abs(comparable.getTime() - new Date(data[i2].time / 1000000)) / 1000);\r\n                //console.log(\"61. if condition met\");\r\n                //comparing if the two datapoints are within a certain number of seconds.\r\n                if (Math.abs(comparable - new Date(data[i2].time / 1000000)) / 1000 < secs) {\r\n                    let distance = calcDist(data[i], data[i2]);\r\n                    //console.log(\"Distance: \" + distance);\r\n                   //console.log(\"66. if condition met\");\r\n\r\n                    //checking the distance, from the closest to the least close to account for risk from proximity.\r\n                    if (distance < 1) {\r\n                        //console.log(\"72. if condition met\")\r\n                        risks.push({ \"dist\": distance, \"person1\": data[i].tagID, \"person2\": data[i2].tagID, \"time\": new Date(data[i].time / 1000000), \"risk\": \"high\" });\r\n                    } else if (distance < 2) {\r\n                        //console.log(\"75. else if condition met\")\r\n                        risks.push({ \"dist\": distance, \"person1\": data[i].tagID, \"person2\": data[i2].tagID, \"time\": new Date(data[i].time / 1000000), \"risk\": \"medium\" });\r\n                    } else if (distance < 4) {\r\n                        //console.log(\"78. else if condition met\")\r\n                        risks.push({ \"dist\": distance, \"person1\": data[i].tagID, \"person2\": data[i2].tagID, \"time\": new Date(data[i].time / 1000000), \"risk\": \"low\" });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.log(\"Risks length: \" + risks.length)\r\n    console.log(\"Risks first item: \" + JSON.stringify(risks[0]))\r\n    console.log(\"---------------------------------------------\")\r\n    return risks;\r\n}\r\n\r\nexport const checkRoomRisk = (data, room, secs = 1) => {\r\n    let i;\r\n    let roomrisk = \"\";\r\n\r\n    let lowrisk = 0;\r\n    let medrisk = 0;\r\n    let highrisk = 0;\r\n\r\n    //Starting the loop into the data.\r\n    for (i = 0; i < data.length - 1; i++) {\r\n\r\n        //Getting a date to compare to.\r\n        let comparable = new Date(data[i].time / 1000000);\r\n\r\n        //Initializing the integer being compared to\r\n        let i2;\r\n\r\n        //skipping cases where person 1 is not in the room we are checking\r\n        if (data[i].room === room) {\r\n\r\n            //Looping i2 to be every object after i\r\n            for (i2 = i + 1; i2 < data.length; i2++) {\r\n\r\n                //skipping cases where person 2 is not in the room we are checking\r\n                if (data[i2].room === room) {\r\n\r\n                    // checking that i and i2 aren't the same person.\r\n                    if (data[i].tagID != data[i2].tagID) {\r\n\r\n                        //comparing if the two datapoints are within a certain number of seconds.\r\n                        if (Math.abs(comparable - new Date(data[i2].time / 1000000)) / 1000 < secs) {\r\n\r\n                            // calculating the distance\r\n                            let distance = calcDist(data[i], data[i2]);\r\n                            //checking the distance, from the closest to the least close to account for risk from proximity.\r\n                            if (distance < 1) {\r\n                                ++highrisk;\r\n                            } else if (distance < 2) {\r\n                                ++medrisk;\r\n                            } else if (distance < 4) {\r\n                                ++lowrisk;\r\n                            }\r\n\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Counting how many risk encounters there were\r\n    const totalrisk = lowrisk + medrisk + highrisk;\r\n\r\n    roomrisk = \"We had a total of \" + totalrisk + \" encounters. \" + highrisk + \" of them were high risk, \" + medrisk + \" of them were medium risk, and \" + lowrisk + \" of them were low risk.\"\r\n\r\n\r\n    if (highrisk > (totalrisk / 2)) {\r\n        roomrisk = roomrisk + \" The riskyness of the room is high, there's some spot where people like to get real close.\"\r\n    } else if (lowrisk > (totalrisk / 2)) {\r\n        roomrisk = roomrisk + \" The riskyness of the room is quite low, people may like to be here, but not too close to each other.\"\r\n    }\r\n\r\n    return roomrisk;\r\n}\r\n\r\n//modify risk check to check through routeData\r\nexport const checkOneRisk = (data, tagID, secs = 1) => {\r\n    let i;\r\n    let individualrisk = [];\r\n\r\n    //Starting the loop into the data.\r\n    for (i = 0; i < data.length - 1; i++) {\r\n\r\n        //Getting a date to compare to.\r\n        let comparable = new Date(data[i].time / 1000000);\r\n\r\n        //Initializing the integer being compared to\r\n        let i2;\r\n\r\n        //Looping i2 to be every object after i\r\n        for (i2 = i + 1; i2 < data.length; i2++) {\r\n\r\n            // checking that i is the person we're checking, that i and i2 aren't the same person, and that they are in the same room.\r\n            if (data[i].tagID === tagID && data[i].tagID != data[i2].tagID && data[i].room === data[i2].room) {\r\n\r\n                //comparing if the two datapoints are within a certain number of seconds.\r\n                if (Math.abs(comparable - new Date(data[i2].time / 1000000)) / 1000 < secs) {\r\n                    let distance = calcDist(data[i], data[i2]);\r\n\r\n                    //checking the distance, from the closest to the least close to account for risk from proximity.\r\n                    if (distance < 1) {\r\n                        individualrisk.push({ \"dist\": distance, \"person2\": data[i2].tagID, \"time\": new Date(data[i].time / 1000000), \"risk\": \"high\" });\r\n                    } else if (distance < 2) {\r\n                        individualrisk.push({ \"dist\": distance, \"person2\": data[i2].tagID, \"time\": new Date(data[i].time / 1000000), \"risk\": \"medium\" });\r\n                    } else if (distance < 4) {\r\n                        individualrisk.push({ \"dist\": distance, \"person2\": data[i2].tagID, \"time\": new Date(data[i].time / 1000000), \"risk\": \"low\" });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    console.log(individualrisk);\r\n    console.log(\"---------------------------------------------\")\r\n    return individualrisk;\r\n}\r\n\r\n//mahd. spread notaatio. Laskeminen for loopin sisällä. HashMap, hajautus algoritmi.\r\n/* \r\nconst [earliest, setEarliest] = React.useState(new Date(Math.min(...trentodata.map(e => new Date(e.time/1000000)))));\r\nconst [latest, setLatest] = React.useState(new Date(Math.max(...trentodata.map(e => new Date(e.time/1000000))))); \r\n*/\r\n\r\nexport const filterData = (trentodata, earliest, latest) => {\r\n    let thisdata = trentodata.filter(trentodata => earliest <= new Date(trentodata.time / 1000000));\r\n    thisdata = thisdata.filter(thisdata => latest >= new Date(thisdata.time / 1000000));\r\n    return thisdata;\r\n}\r\n\r\nexport const calcDist = (posit1, posit2) => {\r\n    let dist1 = Math.pow((posit1.x - posit2.x), 2)\r\n    let dist2 = Math.pow((posit1.y - posit2.y), 2)\r\n\r\n    return Math.sqrt(Math.abs(dist1 + dist2))\r\n}",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":2,"column":26,"nodeType":"89","messageId":"90","endLine":2,"endColumn":36},{"ruleId":"87","severity":1,"message":"91","line":2,"column":38,"nodeType":"89","messageId":"90","endLine":2,"endColumn":51},{"ruleId":"87","severity":1,"message":"92","line":5,"column":40,"nodeType":"89","messageId":"90","endLine":5,"endColumn":48},{"ruleId":"87","severity":1,"message":"93","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":12},{"ruleId":"87","severity":1,"message":"94","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":13},{"ruleId":"87","severity":1,"message":"95","line":8,"column":8,"nodeType":"89","messageId":"90","endLine":8,"endColumn":13},{"ruleId":"87","severity":1,"message":"96","line":42,"column":10,"nodeType":"89","messageId":"90","endLine":42,"endColumn":15},{"ruleId":"87","severity":1,"message":"97","line":42,"column":17,"nodeType":"89","messageId":"90","endLine":42,"endColumn":25},{"ruleId":"87","severity":1,"message":"98","line":43,"column":10,"nodeType":"89","messageId":"90","endLine":43,"endColumn":14},{"ruleId":"87","severity":1,"message":"99","line":43,"column":16,"nodeType":"89","messageId":"90","endLine":43,"endColumn":23},{"ruleId":"87","severity":1,"message":"100","line":2,"column":8,"nodeType":"89","messageId":"90","endLine":2,"endColumn":18},{"ruleId":"87","severity":1,"message":"101","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":22},{"ruleId":"87","severity":1,"message":"102","line":5,"column":8,"nodeType":"89","messageId":"90","endLine":5,"endColumn":29},{"ruleId":"87","severity":1,"message":"103","line":6,"column":8,"nodeType":"89","messageId":"90","endLine":6,"endColumn":29},{"ruleId":"87","severity":1,"message":"104","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":22},{"ruleId":"87","severity":1,"message":"105","line":8,"column":8,"nodeType":"89","messageId":"90","endLine":8,"endColumn":18},{"ruleId":"87","severity":1,"message":"106","line":9,"column":8,"nodeType":"89","messageId":"90","endLine":9,"endColumn":16},{"ruleId":"87","severity":1,"message":"107","line":13,"column":12,"nodeType":"89","messageId":"90","endLine":13,"endColumn":18},{"ruleId":"87","severity":1,"message":"108","line":15,"column":11,"nodeType":"89","messageId":"90","endLine":15,"endColumn":18},{"ruleId":"87","severity":1,"message":"109","line":4,"column":8,"nodeType":"89","messageId":"90","endLine":4,"endColumn":17},{"ruleId":"87","severity":1,"message":"110","line":18,"column":8,"nodeType":"89","messageId":"90","endLine":18,"endColumn":14},{"ruleId":"87","severity":1,"message":"111","line":19,"column":8,"nodeType":"89","messageId":"90","endLine":19,"endColumn":16},{"ruleId":"87","severity":1,"message":"112","line":24,"column":8,"nodeType":"89","messageId":"90","endLine":24,"endColumn":20},{"ruleId":"87","severity":1,"message":"113","line":51,"column":12,"nodeType":"89","messageId":"90","endLine":51,"endColumn":21},{"ruleId":"87","severity":1,"message":"114","line":53,"column":11,"nodeType":"89","messageId":"90","endLine":53,"endColumn":21},{"ruleId":"87","severity":1,"message":"115","line":59,"column":11,"nodeType":"89","messageId":"90","endLine":59,"endColumn":18},{"ruleId":"87","severity":1,"message":"116","line":72,"column":9,"nodeType":"89","messageId":"90","endLine":72,"endColumn":14},{"ruleId":"87","severity":1,"message":"117","line":74,"column":9,"nodeType":"89","messageId":"90","endLine":74,"endColumn":17},{"ruleId":"87","severity":1,"message":"118","line":76,"column":9,"nodeType":"89","messageId":"90","endLine":76,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":86,"column":39,"nodeType":"121","endLine":86,"endColumn":51,"suggestions":"122"},{"ruleId":"87","severity":1,"message":"123","line":145,"column":18,"nodeType":"89","messageId":"90","endLine":145,"endColumn":25},{"ruleId":"87","severity":1,"message":"124","line":154,"column":19,"nodeType":"89","messageId":"90","endLine":154,"endColumn":27},{"ruleId":"87","severity":1,"message":"125","line":155,"column":12,"nodeType":"89","messageId":"90","endLine":155,"endColumn":21},{"ruleId":"87","severity":1,"message":"126","line":155,"column":23,"nodeType":"89","messageId":"90","endLine":155,"endColumn":35},{"ruleId":"87","severity":1,"message":"127","line":157,"column":11,"nodeType":"89","messageId":"90","endLine":157,"endColumn":21},{"ruleId":"128","severity":1,"message":"129","line":61,"column":31,"nodeType":"130","messageId":"131","endLine":61,"endColumn":33},{"ruleId":"128","severity":1,"message":"129","line":119,"column":39,"nodeType":"130","messageId":"131","endLine":119,"endColumn":41},{"ruleId":"128","severity":1,"message":"129","line":176,"column":58,"nodeType":"130","messageId":"131","endLine":176,"endColumn":60},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","'Redirect' is defined but never used.","'User' is defined but never used.","'Login' is defined but never used.","'Admin' is defined but never used.","'token' is assigned a value but never used.","'setToken' is assigned a value but never used.","'type' is assigned a value but never used.","'setType' is assigned a value but never used.","'Typography' is defined but never used.","'ExpansionPanel' is defined but never used.","'ExpansionPanelSummary' is defined but never used.","'ExpansionPanelDetails' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'IconButton' is defined but never used.","'EditIcon' is defined but never used.","'Logins' is assigned a value but never used.","'getData' is assigned a value but never used.","'TextField' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'ListItemText' is defined but never used.","'readyData' is assigned a value but never used.","'trentodata' is assigned a value but never used.","'summary' is assigned a value but never used.","'risks' is assigned a value but never used.","'roomrisk' is assigned a value but never used.","'individualrisk' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'minmaxTime'. Either include it or remove the dependency array.","ArrayExpression",["134"],"'setRisk' is assigned a value but never used.","'setDense' is assigned a value but never used.","'secondary' is assigned a value but never used.","'setSecondary' is assigned a value but never used.","'renderlist' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},"Update the dependencies array to be: [minmaxTime, uploadData]",{"range":"137","text":"138"},[2744,2756],"[minmaxTime, uploadData]"]